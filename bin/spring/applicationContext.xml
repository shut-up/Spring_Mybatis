<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
		<!-- 加载配置文件 -->
		<context:property-placeholder location="classpath:db.properties"/>
		
		<!-- 数据库连接池 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		       <property name="driverClassName" value="${jdbc.driver}"/>
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.username}"/>
				<property name="password" value="${jdbc.password}"/>
				<property name="maxActive" value="10"/>
				<property name="maxIdle" value="5"/>
		</bean>	
		
		<!-- mapper配置 --> 
		<!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<!-- 加载mybatis配置文件 -->
			<property name="configLocation" value="mybatis/SqlMapConfig.xml"></property>
			<!-- 数据库连接池 -->
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		
		<!-- 原始dao接口 -->
		<bean id="userDao" class="cn.parker.ssm.dao.UserDaoImp">
			<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
		</bean>
		
		<!-- mapper配置，需要针对每个mapper单个配置，麻烦，推荐使用批量扫描（下面方法）
			MapperFactoryBean:根据mapper接口生成代理对象 -->
		
<!-- 		 <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		 	 mapperInterface指定mapper接口
		 	<property name="mapperInterface" value="cn.parker.ssm.mapper.UserMapper"></property>
		 	<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
		 </bean> -->
		 
		 
		 <!-- 推荐使用，批量扫描
			 mapper批量扫描，从mapper包中自动 扫描出mapper接口，自动创建代理对象，并且在spring容器中注册
			 遵循规范：mapper.java的类名和mapper.xml文件名必须一致，且在同一目录下
			 扫描出的mapper的bean的id为mapper类名（首字母大写）
		  -->
		 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		 <!-- basePackage指定要扫描的包，扫描多个包，使用半角逗号分隔 -->
		 	<property name="basePackage" value="cn.parker.ssm.mapper"/>
		 	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		 </bean>
		 
		
</beans>



